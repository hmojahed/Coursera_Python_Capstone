!pip install sqlalchemy==1.3.9
!pip install ibm_db_sa
!pip install ipython-sql

%load_ext sql

%%%
Look under:
IBM Cloud>ResourceList>Db2-za>Service credentials>The hash information is
     ...
      "composed": [
        "db2://bxj47618:09NKlKZ2WHMC8SCn@ba99a9e6-d59e-4883-8fc0-d6a8c9f7a08f.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud:31321/bludb?authSource=admin&replicaSet=replset"
     ...

So, extract from after db2:// to bludb and add ?security=SSL at the end and add %sql ibm_db_sa:// to the front (now you can run this in Jupyter notebook):
%%%

%sql ibm_db_sa://bxj47618:09NKlKZ2WHMC8SCn@ba99a9e6-d59e-4883-8fc0-d6a8c9f7a08f.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud:31321/bludb?security=SSL

SQL-----------------------------------
TASK 1: Display the names of the unique launch sites in the space mission
%sql SELECT DISTINCT LAUNCH_SITE FROM SPACEXTBL

 * ibm_db_sa://bxj47618:***@ba99a9e6-d59e-4883-8fc0-d6a8c9f7a08f.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud:31321/bludb
Done.
launch_site
CCAFS LC-40
CCAFS SLC-40
KSC LC-39A
VAFB SLC-4E


TASK 2: Display 5 records where launch sites begin with the string 'CCA'
%sql SELECT LAUNCH_SITE FROM SPACEXTBL WHERE LAUNCH_SITE LIKE 'CCA%' LIMIT 5

* ibm_db_sa://bxj47618:***@ba99a9e6-d59e-4883-8fc0-d6a8c9f7a08f.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud:31321/bludb
Done.
launch_site
CCAFS LC-40
CCAFS LC-40
CCAFS LC-40
CCAFS LC-40
CCAFS LC-40

TASK 3: Display the total payload mass carried by boosters launched by NASA (CRS)
%sql SELECT SUM(PAYLOAD_MASS__KG_) FROM SPACEXTBL WHERE CUSTOMER LIKE '%NASA (CRS)%'

* ibm_db_sa://bxj47618:***@ba99a9e6-d59e-4883-8fc0-d6a8c9f7a08f.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud:31321/bludb
Done.
1
48213


TASK 4: Display average payload mass carried by booster version F9 v1.1
%sql SELECT AVG(PAYLOAD_MASS__KG_) FROM SPACEXTBL WHERE BOOSTER_VERSION LIKE '%F9 v1.1%'

* ibm_db_sa://bxj47618:***@ba99a9e6-d59e-4883-8fc0-d6a8c9f7a08f.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud:31321/bludb
Done.
1
2534


TASK 5: List the date when the first successful landing outcome in ground pad was acheived.
Hint:Use min function
%sql SELECT MIN(DATE) FROM SPACEXTBL WHERE LANDING__OUTCOME LIKE 'Success (ground pad)' 

* ibm_db_sa://bxj47618:***@ba99a9e6-d59e-4883-8fc0-d6a8c9f7a08f.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud:31321/bludb
Done.
1
2015-12-22


TASK 6: List the names of the boosters which have success in drone ship and have payload mass greater than 4000 but less than 6000
(I assumed the name of the booster is correspondig to the column "BOOSTER_VERSION")
%sql SELECT BOOSTER_VERSION FROM SPACEXTBL WHERE LANDING__OUTCOME LIKE 'Success (drone ship)' AND (PAYLOAD_MASS__KG_>4000 AND PAYLOAD_MASS__KG_<6000)

booster_version
F9 FT B1022
F9 FT B1026
F9 FT B1021.2
F9 FT B1031.2


Task 7: 
List the total number of successful and failure mission outcomes
%sql SELECT COUNT(*) FROM SPACEXTBL WHERE MISSION_OUTCOME LIKE '%Success%' OR MISSION_OUTCOME LIKE '%Failure%'

* ibm_db_sa://bxj47618:***@ba99a9e6-d59e-4883-8fc0-d6a8c9f7a08f.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud:31321/bludb
Done.
1
101


TASK 8:
List the names of the booster_versions which have carried the maximum payload mass. Use a subquery
%sql SELECT BOOSTER_VERSION FROM SPACEXTBL WHERE PAYLOAD_MASS__KG_=(SELECT MAX(PAYLOAD_MASS__KG_) FROM SPACEXTBL)
(learning step: %sql SELECT BOOSTER_VERSION,MAX(PAYLOAD_MASS__KG_) FROM SPACEXTBL GROUP BY BOOSTER_VERSION)

* ibm_db_sa://bxj47618:***@ba99a9e6-d59e-4883-8fc0-d6a8c9f7a08f.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud:31321/bludb
Done.
booster_version
F9 B5 B1048.4
F9 B5 B1049.4
F9 B5 B1051.3
F9 B5 B1056.4
F9 B5 B1048.5
F9 B5 B1051.4
F9 B5 B1049.5
F9 B5 B1060.2
F9 B5 B1058.3
F9 B5 B1051.6
F9 B5 B1060.3
F9 B5 B1049.7


Task 9:
List the failed landing_outcomes in drone ship, their booster versions, and launch site names for in year 2015
%sql SELECT LANDING__OUTCOME, BOOSTER_VERSION, LAUNCH_SITE, DATE FROM SPACEXTBL WHERE (DATE>'2015-01-01' AND DATE <'2016-01-01') AND LANDING__OUTCOME LIKE 'Failure (drone ship)%'

* ibm_db_sa://bxj47618:***@ba99a9e6-d59e-4883-8fc0-d6a8c9f7a08f.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud:31321/bludb
Done.
landing__outcome	booster_version	launch_site	DATE
Failure (drone ship)	F9 v1.1 B1012	CCAFS LC-40	2015-01-10
Failure (drone ship)	F9 v1.1 B1015	CCAFS LC-40	2015-04-14

%sql SELECT LANDING__OUTCOME, BOOSTER_VERSION, LAUNCH_SITE FROM SPACEXTBL WHERE (DATE>'2015-01-01' AND DATE <'2016-01-01') AND LANDING__OUTCOME LIKE 'Failure (drone ship)%'

* ibm_db_sa://bxj47618:***@ba99a9e6-d59e-4883-8fc0-d6a8c9f7a08f.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud:31321/bludb
Done.
landing__outcome	booster_version	launch_site
Failure (drone ship)	F9 v1.1 B1012	CCAFS LC-40
Failure (drone ship)	F9 v1.1 B1015	CCAFS LC-40


Task 10:
Rank the count of landing outcomes (such as Failure (drone ship) or Success (ground pad)) between the date 2010-06-04 and 2017-03-20, in descending order
I:\ e.g. SELECT * FROM table_name ORDER BY id1 DESC, id2 DESC
RANK EDUCATION:
SELECT ROW_NUMBER() 
        OVER (ORDER BY Loan_Amount DESC) AS Rank, 
    MemberID, LOAN_AMOUNT,
FROM vwPrintTop20Borrowers

If you want a rank column, you can use it with group by:

SELECT n.Name, COUNT(*) as TOTALS,
       RANK() OVER (ORDER BY COUNT(*) DESC) as Total_Rank
FROM @Name n
GROUP BY n.Name
ORDER BY TOTALS DESC;

%sql SELECT LANDING__OUTCOME, COUNT(*) as TOTALS, RANK() OVER (ORDER BY COUNT(*) DESC) as Total_Rank FROM SPACEXTBL WHERE (DATE>'2010-06-04' AND DATE<'2017-03-20') GROUP BY LANDING__OUTCOME ORDER BY TOTALS DESC 
* ibm_db_sa://bxj47618:***@ba99a9e6-d59e-4883-8fc0-d6a8c9f7a08f.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud:31321/bludb
Done.
landing__outcome	totals	total_rank
No attempt	10	1
Failure (drone ship)	5	2
Success (drone ship)	5	2
Controlled (ocean)	3	4
Success (ground pad)	3	4
Uncontrolled (ocean)	2	6
Failure (parachute)	1	7
Precluded (drone ship)	1	7


%sql SELECT LANDING__OUTCOME, COUNT(*) as COUNT_OF_OUTCOMES FROM SPACEXTBL WHERE (DATE>'2010-06-04' AND DATE<'2017-03-20') GROUP BY LANDING__OUTCOME ORDER BY COUNT_OF_OUTCOMES DESC 

landing__outcome	count_of_outcomes
No attempt	10
Failure (drone ship)	5
Success (drone ship)	5
Controlled (ocean)	3
Success (ground pad)	3
Uncontrolled (ocean)	2
Failure (parachute)	1
Precluded (drone ship)	1




